package com.haozhiyan.zhijian.myDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.haozhiyan.zhijian.bean.biaoduan.TowerBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOWER_BEAN".
*/
public class TowerBeanDao extends AbstractDao<TowerBean, String> {

    public static final String TABLENAME = "TOWER_BEAN";

    /**
     * Properties of entity TowerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TowerId = new Property(0, String.class, "towerId", true, "TOWER_ID");
        public final static Property Tower = new Property(1, String.class, "tower", false, "TOWER");
    };

    private DaoSession daoSession;

    private Query<TowerBean> biaoDuanBean_ScopeChildQuery;

    public TowerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TowerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOWER_BEAN\" (" + //
                "\"TOWER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: towerId
                "\"TOWER\" TEXT);"); // 1: tower
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TOWER_BEAN_TOWER_ID ON TOWER_BEAN" +
                " (\"TOWER_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOWER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TowerBean entity) {
        stmt.clearBindings();
 
        String towerId = entity.getTowerId();
        if (towerId != null) {
            stmt.bindString(1, towerId);
        }
 
        String tower = entity.getTower();
        if (tower != null) {
            stmt.bindString(2, tower);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TowerBean entity) {
        stmt.clearBindings();
 
        String towerId = entity.getTowerId();
        if (towerId != null) {
            stmt.bindString(1, towerId);
        }
 
        String tower = entity.getTower();
        if (tower != null) {
            stmt.bindString(2, tower);
        }
    }

    @Override
    protected final void attachEntity(TowerBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TowerBean readEntity(Cursor cursor, int offset) {
        TowerBean entity = new TowerBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // towerId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // tower
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TowerBean entity, int offset) {
        entity.setTowerId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTower(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TowerBean entity, long rowId) {
        return entity.getTowerId();
    }
    
    @Override
    public String getKey(TowerBean entity) {
        if(entity != null) {
            return entity.getTowerId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "scopeChild" to-many relationship of BiaoDuanBean. */
    public List<TowerBean> _queryBiaoDuanBean_ScopeChild(String towerId) {
        synchronized (this) {
            if (biaoDuanBean_ScopeChildQuery == null) {
                QueryBuilder<TowerBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TowerId.eq(null));
                biaoDuanBean_ScopeChildQuery = queryBuilder.build();
            }
        }
        Query<TowerBean> query = biaoDuanBean_ScopeChildQuery.forCurrentThread();
        query.setParameter(0, towerId);
        return query.list();
    }

}
